module Sequitur
  # In a context-free grammar, a production is a rule in which
  # its left-hand side (LHS) consists solely of a non-terminal symbol
  # and the right-hand side (RHS) consists of a sequence of symbols.
  # The symbols in RHS can be either terminal or non-terminal symbols.
  # The rule stipulates that the LHS is equivalent to the RHS,
  # in other words every occurrence of the LHS can be substituted to
  # corresponding RHS.
  # Implementation note: the object id of the production is taken as its LHS.
  class Production
    # @return [Sequitur::SymbolSequence] The right-hand side (rhs)
    #   consists of a sequence of grammar symbols
    attr_reader rhs: untyped

    # @return [Integer] The reference count (= how times other productions reference this one)
    attr_reader refcount: untyped

    # @return [Array<Sequitur::Digram>] The sequence of digrams appearing in the RHS
    attr_reader digrams: untyped

    # Constructor.
    # Build a production with an empty RHS.
    def initialize: () -> void

    # Identity testing.
    # @param other [Production, ProductionRef] another production or production reference.
    # @return [TrueClass, FalseClass] true when the receiver and other are the same.
    def ==: ((Production | ProductionRef) other) -> bool

    # Is the rhs empty?
    # @return [TrueClass, FalseClass] true if the rhs has no members.
    def empty?: () -> bool

    # Increment the reference count by one.
    # @return [Integer]
    def incr_refcount: () -> Integer

    # Decrement the reference count by one.
    # @return [Integer]
    def decr_refcount: () -> Integer

    # Select the references to production appearing in the rhs.
    # @return [Array<ProductionRef>]
    def references: () -> Array[Sequitur::ProductionRef]

    # Look in the rhs all the references to a production passed a argument.
    # @param a_prod [Production, ProductionRef] The production to search for.
    # @return [Array<ProductionRef>]
    def references_of: ((Production | ProductionRef) a_prod) -> Array[ProductionRef]

    # Enumerate the digrams appearing in the right-hand side (rhs)
    # @return [Array<Sequitur::Digram>] the list of digrams found in rhs of this production.
    def recalc_digrams: () -> Array[Sequitur::Digram]

    # Does the rhs have exactly one digram only (= 2 symbols)?
    # @return [TrueClass, FalseClass] true when the rhs contains exactly two symbols.
    def single_digram?: () -> bool

    # Detect whether the last digram occurs twice
    # Assumption: when a digram occurs twice in a production then it must occur
    # at the end of the rhs
    # @return [TrueClass, FalseClass] true when the digram occurs twice in rhs.
    def repeated_digram?: () -> bool

    # Retrieve the last digram appearing in the RHS (if any).
    # @return [Sequitur::Digram, NilClass] last digram in the rhs otherwise nil.
    def last_digram: () -> (nil | Sequitur::Digram)

    # Emit a text representation of the production rule.
    # Text is of the form:
    # object id of production : rhs as space-separated sequence of symbols.
    # @return [String]
    def to_string: () -> ::String

    # Add a (grammar) symbol at the end of the RHS.
    # @param aSymbol [Object] A (grammar) symbol to add.
    def append_symbol: (untyped aSymbol) -> untyped

    # Clear the right-hand side.
    # Any referenced production has its reference counter decremented.
    def clear_rhs: () -> untyped

    # Find all the positions where the digram occurs in the rhs
    # @param symb1 [Object] first symbol of the digram
    # @param symb2 [Object] second symbol of the digram
    # @return [Array<Integer>] the list of indices where the digram occurs in rhs.
    # @example
    #   # Given the production p : a b c a b a b d
    #   #Then ...
    #   p.positions_of(a, b) # => [0, 3, 5]
    #   # Caution: "overlapping" digrams shouldn't be counted
    #   # Given the production p : a a b a a a c d
    #   # Then ...
    #   p.positions_of(a, a) # => [0, 3]
    def positions_of: (untyped symb1, untyped symb2) -> Array[Integer]

    # Given that the production P passed as argument has exactly 2 symbols
    #   in its rhs s1 s2, substitute in the rhs of self all occurrences of
    #   s1 s2 by a reference to P.
    # @param another [Production, ProductionRef] a production that
    #   consists exactly of one digram (= 2 symbols).
    def reduce_step: ((Production | ProductionRef) another) -> untyped

    # Replace every occurrence of 'another' production in self.rhs by
    #   the symbols in the rhs of 'another'.
    # @param another [Production, ProductionRef] a production that
    #   consists exactly of one digram (= 2 symbols).
    # @example Synopsis
    # # Given the production p_A : a p_B b p_B c
    # # And the production p_B : x y
    # # Then...
    # p_A.derive_step(p_B)
    # #Modifies p_A as into: p_A -> a x y b x y c
    def derive_step: ((Production | ProductionRef) another) -> untyped

    # Part of the 'visitee' role in Visitor design pattern.
    # @param aVisitor[Sequitur::GrammarVisitor]
    def accept: (Sequitur::GrammarVisitor aVisitor) -> untyped
  end
end
