module Sequitur
  # Module for classes implementing the Sequitur algorithm
  # Specialization of the DynamicGrammar class.
  # A Sequitur grammar is a context-free grammar that is entirely built
  # from a sequence of input tokens through the Sequitur algorithm.
  class SequiturGrammar < DynamicGrammar
    # Build the grammar from an enumerator of tokens.
    # @param anEnum [Enumerator] an enumerator that will iterate
    #   over the input tokens.
    def initialize: (untyped anEnum) -> void

    private

    # Struct used for internal purposes
    CollisionDiagnosis: untyped

    # Assuming that a new input token was added to the start production,
    # enforce the digram unicity and rule utility rules
    # begin
    #   if a digram D occurs twice in the grammar then
    #     add a production P : D (if not already there)
    #     replace both Ds with R (reduction step).
    #   end
    #   if a production P : RHS in referenced only once then
    #     replace P by its RHS (derivation step)
    #     remove P from grammar
    #   end
    #  end until digram unicity and rule utility are met
    def enforce_rules: () -> untyped

    # Check whether a digram is used twice in the grammar.
    # Return an empty Hash if each digram appears once.
    # Otherwise return a Hash with a pair of the form: digram => [Pi, Pk]
    # Where Pi, Pk are two productions where the digram occurs.
    def detect_collision: () -> untyped

    # When a collision diagnosis indicates that a given
    # digram d occurs twice in the grammar
    # Then create a new production that will have
    # the symbols of d as its rhs members.
    def restore_unicity: (untyped aDiagnosis) -> untyped

    # Return a production that is used less than twice in the grammar.
    def detect_useless_production: () -> untyped

    # Given the passed production P is referenced only once.
    # Then replace P by its RHS where it is referenced.
    # And delete P
    def restore_utility: (untyped prod_index) -> untyped

    # Create a new production that will have the symbols from digram
    # as its rhs members.
    def build_production_for: (untyped aDigram) -> untyped
  end
end
