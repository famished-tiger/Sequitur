module Sequitur
  # Module for classes implementing the Sequitur algorithm
  # Represents a sequence (concatenation) of grammar symbols
  # as they appear in rhs of productions
  class SymbolSequence
    # The sequence of symbols itself
    attr_reader symbols: untyped

    # Create an empty sequence
    def initialize: () -> void

    # Copy constructor invoked by dup or clone methods.
    # @param orig [SymbolSequence]
    def initialize_copy: (untyped orig) -> untyped

    # Clear the symbol sequence.
    def clear: () -> untyped

    # Tell whether the sequence is empty.
    # @[true / false] true only if the sequence has no symbol in it.
    def empty?: () -> untyped

    # Count the number of elements in the sequence.
    #  @[Fixnum] the number of elements
    def size: () -> untyped

    # Append a grammar symbol at the end of the sequence.
    # @param aSymbol [Object] The symbol to append.
    def <<: (untyped aSymbol) -> (nil | untyped)

    # Retrieve the element from the sequence at given position.
    # @param anIndex [Fixnum] A zero-based index of the element to access.
    def []: (untyped anIndex) -> untyped

    # Equality testing.
    # @param other [SymbolSequence or Array] the other other sequence
    #   to compare to.
    # @true when an item from self equals the corresponding
    #   item from 'other'
    def ==: (untyped other) -> untyped

    # Select the references to production appearing in the rhs.
    # @[Array of ProductionRef]
    def references: () -> untyped

    # Select the references of the given production appearing in the rhs.
    # @param aProduction [Production]
    # @[Array of ProductionRef]
    def references_of: (untyped aProduction) -> untyped

    # Emit a text representation of the symbol sequence.
    # Text is of the form: space-separated sequence of symbols.
    # @[String]
    def to_string: () -> untyped

    # Insert at position the elements from another sequence.
    # @param position [Fixnum] A zero-based index of the symbols to replace.
    # @param another [SymbolSequence] A production with a two-elements rhs
    #   (a single digram).
    def insert_at: (untyped position, untyped another) -> untyped

    # Given that the production P passed as argument has exactly 2 symbols
    #   in its rhs s1 s2, substitute in the rhs of self all occurrences of
    #   s1 s2 by a reference to P.
    # @param index [Fixnum] the position of a two symbol sequence to be replaced
    #   by the production
    # @param aProduction [Production or ProductionRef] a production that
    #   consists exactly of one digram (= 2 symbols).
    def reduce_step: (untyped index, untyped aProduction) -> untyped

    # Remove the element at given position
    # @param position [Fixnum] a zero-based index.
    def delete_at: (untyped position) -> untyped

    # Part of the 'visitee' role in Visitor design pattern.
    # @param aVisitor[GrammarVisitor]
    def accept: (untyped aVisitor) -> untyped

    private

    def invalidate_refs: () -> untyped
  end
end
